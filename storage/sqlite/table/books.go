//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Books = newBooksTable("", "books", "")

type booksTable struct {
	sqlite.Table

	//Columns
	ID            sqlite.ColumnInteger
	Title         sqlite.ColumnString
	Description   sqlite.ColumnString
	Isbn          sqlite.ColumnString
	NumOfPages    sqlite.ColumnInteger
	Rating        sqlite.ColumnInteger
	State         sqlite.ColumnString
	DateAdded     sqlite.ColumnTimestamp
	DateUpdated   sqlite.ColumnTimestamp
	DateCompleted sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type BooksTable struct {
	booksTable

	EXCLUDED booksTable
}

// AS creates new BooksTable with assigned alias
func (a BooksTable) AS(alias string) *BooksTable {
	return newBooksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BooksTable with assigned schema name
func (a BooksTable) FromSchema(schemaName string) *BooksTable {
	return newBooksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BooksTable with assigned table prefix
func (a BooksTable) WithPrefix(prefix string) *BooksTable {
	return newBooksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BooksTable with assigned table suffix
func (a BooksTable) WithSuffix(suffix string) *BooksTable {
	return newBooksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBooksTable(schemaName, tableName, alias string) *BooksTable {
	return &BooksTable{
		booksTable: newBooksTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newBooksTableImpl("", "excluded", ""),
	}
}

func newBooksTableImpl(schemaName, tableName, alias string) booksTable {
	var (
		IDColumn            = sqlite.IntegerColumn("id")
		TitleColumn         = sqlite.StringColumn("title")
		DescriptionColumn   = sqlite.StringColumn("description")
		IsbnColumn          = sqlite.StringColumn("isbn")
		NumOfPagesColumn    = sqlite.IntegerColumn("numOfPages")
		RatingColumn        = sqlite.IntegerColumn("rating")
		StateColumn         = sqlite.StringColumn("state")
		DateAddedColumn     = sqlite.TimestampColumn("dateAdded")
		DateUpdatedColumn   = sqlite.TimestampColumn("dateUpdated")
		DateCompletedColumn = sqlite.TimestampColumn("dateCompleted")
		allColumns          = sqlite.ColumnList{IDColumn, TitleColumn, DescriptionColumn, IsbnColumn, NumOfPagesColumn, RatingColumn, StateColumn, DateAddedColumn, DateUpdatedColumn, DateCompletedColumn}
		mutableColumns      = sqlite.ColumnList{TitleColumn, DescriptionColumn, IsbnColumn, NumOfPagesColumn, RatingColumn, StateColumn, DateAddedColumn, DateUpdatedColumn, DateCompletedColumn}
	)

	return booksTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Title:         TitleColumn,
		Description:   DescriptionColumn,
		Isbn:          IsbnColumn,
		NumOfPages:    NumOfPagesColumn,
		Rating:        RatingColumn,
		State:         StateColumn,
		DateAdded:     DateAddedColumn,
		DateUpdated:   DateUpdatedColumn,
		DateCompleted: DateCompletedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
