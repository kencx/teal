//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var BooksAuthors = newBooksAuthorsTable("", "books_authors", "")

type booksAuthorsTable struct {
	sqlite.Table

	//Columns
	BookID   sqlite.ColumnInteger
	AuthorID sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type BooksAuthorsTable struct {
	booksAuthorsTable

	EXCLUDED booksAuthorsTable
}

// AS creates new BooksAuthorsTable with assigned alias
func (a BooksAuthorsTable) AS(alias string) *BooksAuthorsTable {
	return newBooksAuthorsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BooksAuthorsTable with assigned schema name
func (a BooksAuthorsTable) FromSchema(schemaName string) *BooksAuthorsTable {
	return newBooksAuthorsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BooksAuthorsTable with assigned table prefix
func (a BooksAuthorsTable) WithPrefix(prefix string) *BooksAuthorsTable {
	return newBooksAuthorsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BooksAuthorsTable with assigned table suffix
func (a BooksAuthorsTable) WithSuffix(suffix string) *BooksAuthorsTable {
	return newBooksAuthorsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBooksAuthorsTable(schemaName, tableName, alias string) *BooksAuthorsTable {
	return &BooksAuthorsTable{
		booksAuthorsTable: newBooksAuthorsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newBooksAuthorsTableImpl("", "excluded", ""),
	}
}

func newBooksAuthorsTableImpl(schemaName, tableName, alias string) booksAuthorsTable {
	var (
		BookIDColumn   = sqlite.IntegerColumn("book_id")
		AuthorIDColumn = sqlite.IntegerColumn("author_id")
		allColumns     = sqlite.ColumnList{BookIDColumn, AuthorIDColumn}
		mutableColumns = sqlite.ColumnList{}
	)

	return booksAuthorsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		BookID:   BookIDColumn,
		AuthorID: AuthorIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
