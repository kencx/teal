//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Authors = newAuthorsTable("", "authors", "")

type authorsTable struct {
	sqlite.Table

	//Columns
	ID   sqlite.ColumnInteger
	Name sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type AuthorsTable struct {
	authorsTable

	EXCLUDED authorsTable
}

// AS creates new AuthorsTable with assigned alias
func (a AuthorsTable) AS(alias string) *AuthorsTable {
	return newAuthorsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuthorsTable with assigned schema name
func (a AuthorsTable) FromSchema(schemaName string) *AuthorsTable {
	return newAuthorsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuthorsTable with assigned table prefix
func (a AuthorsTable) WithPrefix(prefix string) *AuthorsTable {
	return newAuthorsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuthorsTable with assigned table suffix
func (a AuthorsTable) WithSuffix(suffix string) *AuthorsTable {
	return newAuthorsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuthorsTable(schemaName, tableName, alias string) *AuthorsTable {
	return &AuthorsTable{
		authorsTable: newAuthorsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newAuthorsTableImpl("", "excluded", ""),
	}
}

func newAuthorsTableImpl(schemaName, tableName, alias string) authorsTable {
	var (
		IDColumn       = sqlite.IntegerColumn("id")
		NameColumn     = sqlite.StringColumn("name")
		allColumns     = sqlite.ColumnList{IDColumn, NameColumn}
		mutableColumns = sqlite.ColumnList{NameColumn}
	)

	return authorsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Name: NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
